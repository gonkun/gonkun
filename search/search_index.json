{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gon Personal Docs This documentation is a remainder of all tools and technologie sthat I use on my job. Most of the documentation may be is a mix off commands and explanations that I wrote quickly and dirty, but it helps me to remind all this stuff.","title":"Home"},{"location":"#gon-personal-docs","text":"This documentation is a remainder of all tools and technologie sthat I use on my job. Most of the documentation may be is a mix off commands and explanations that I wrote quickly and dirty, but it helps me to remind all this stuff.","title":"Gon Personal Docs"},{"location":"aws/","text":"","title":"AWS"},{"location":"bash/","text":"BASH Common Commands Find files with an specific name and execute gsed for replace a string for another find . -type f -name 'filename' | xargs gsed -i 's/<pattern_A>/<pattern_B>/g' Find files with an specific name and execute gsed for delete a line where a string pattern is matched find . -type f -name 'filename' | xargs gsed -i '/<pattern>/d'","title":"BASH"},{"location":"bash/#bash","text":"","title":"BASH"},{"location":"bash/#common-commands","text":"Find files with an specific name and execute gsed for replace a string for another find . -type f -name 'filename' | xargs gsed -i 's/<pattern_A>/<pattern_B>/g' Find files with an specific name and execute gsed for delete a line where a string pattern is matched find . -type f -name 'filename' | xargs gsed -i '/<pattern>/d'","title":"Common Commands"},{"location":"dse/","text":"","title":"DataStax"},{"location":"github-actions/","text":"GitHub Actions Tutorials and Guides GitHub Actions Official Documentation Tools and Projects Act: Run GitHub Actions locally","title":"GitHub Actions"},{"location":"github-actions/#github-actions","text":"","title":"GitHub Actions"},{"location":"github-actions/#tutorials-and-guides","text":"GitHub Actions Official Documentation","title":"Tutorials and Guides"},{"location":"github-actions/#tools-and-projects","text":"Act: Run GitHub Actions locally","title":"Tools and Projects"},{"location":"help/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"help/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"help/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"help/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"istio/","text":"","title":"Istio"},{"location":"k8s/","text":"Kubernetes Common Commands Get info about cluster kubectl cluster-info Get all pods kubectl get pods -A Get resource yaml kubectl get <resource> -n <namespace> <resource_name> -o yaml Get list of CRD applied kubectl get customresourcedefinitions List pods Docker images in a specific namespace kubectl get pods -n <namespace> -o jsonpath=\"{.items[*].spec.containers[*].image}\" Restart all deployments in a namespace kubectl rollout restart deployment -n <namespace> List all running pods in a specific namespace kubectl get pods -n <namespace> --field-selector=status.phase=Running List all non-running pods in a specific namespace kubectl get pods -A --field-selector=status.phase!=Running | grep -v Complete Create tunnel to a service using port-forward (like a SSH tunnel) kubectl port-forward -n <namespace> svc/<service_name> <localhost_port>:<service_port> List all PVC associated with their respective pod kubectl get po -o json --all-namespaces | jq -j '.items[] | \"\\(.metadata.namespace), \\(.metadata.name), \\(.spec.volumes[].persistentVolumeClaim.claimName)\\n\"' | grep -v null List aal pods with events related to them kubectl get pods --watch --output-watch-events -A List all events with filter \"type=Warning\" kubectl get events -w --field-selector=type=Warning -A List all environment variables of specific pod kubectl set env -n <namespace> pod/<podname> --list Advanced Commands List of nodes and their memory size kubectl get no -o json | jq -r '.items | sort_by(.status.capacity.memory)[]|[.metadata.name,.status.capacity.memory]| @tsv' List of nodes and the number of pods running on them kubectl get pod -o json --all-namespaces | jq '.items | group_by(.spec.nodeName) | map({\"nodeName\": .[0].spec.nodeName, \"count\": length}) | sort_by(.count)' List all pods sort by memory usage k top pods -A --sort-by='memory' List all pods sorted by cpu usage k top pods -A --sort-by='cpu' Sorting list of pods (in this case, by the number of restarts) kubectl get pods --sort-by=.status.containerStatuses[0].restartCount Print limits and requests for each pod kubectl get pods -n <namespace> -o=custom-columns='NAME:spec.containers[*].name,MEMREQ:spec.containers[*].resources.requests.memory,MEMLIM:spec.containers[*].resources.limits.memory,CPUREQ:spec.containers[*].resources.requests.cpu,CPULIM:spec.containers[*].resources.limits.cpu' Print all services and their respective nodePorts kubectl get --all-namespaces svc -o json | jq -r '.items[] | [.metadata.name,([.spec.ports[].nodePort | tostring ] | join(\"|\"))]| @tsv' Copy secrets from a namespace to another kubectl get secrets -o json --namespace <namespace_source> | jq '.items[].metadata.namespace = \"<namespace_destiny>\"' | kubectl create-f - Logging Commands Kubectl Print logs with human-readable timestamp kubectl -n <namespace> logs -f <pod_name> --timestamps Getting logs from all pods using alabel to filter kubectl -n <namespace> logs -f -l app=nginx Stern Tail logs all pods on specific namespace stern -n <namespace> . Tail logs all pods with excludeds stern -n <namespace> --exclude-container <pattern_string> . Tail logs specific pods stern -n <namespace> --container <pattern_string> Tutorials and Guides Networking The Kubernetes Networking Guide An Illustrated Guide to Kubernetes Networking [Part 1] An Illustrated Guide to Kubernetes Networking [Part 2] An Illustrated Guide to Kubernetes Networking [Part 3] ALB Ingress Controller on AWS EKS","title":"Kubernetes"},{"location":"k8s/#kubernetes","text":"","title":"Kubernetes"},{"location":"k8s/#common-commands","text":"Get info about cluster kubectl cluster-info Get all pods kubectl get pods -A Get resource yaml kubectl get <resource> -n <namespace> <resource_name> -o yaml Get list of CRD applied kubectl get customresourcedefinitions List pods Docker images in a specific namespace kubectl get pods -n <namespace> -o jsonpath=\"{.items[*].spec.containers[*].image}\" Restart all deployments in a namespace kubectl rollout restart deployment -n <namespace> List all running pods in a specific namespace kubectl get pods -n <namespace> --field-selector=status.phase=Running List all non-running pods in a specific namespace kubectl get pods -A --field-selector=status.phase!=Running | grep -v Complete Create tunnel to a service using port-forward (like a SSH tunnel) kubectl port-forward -n <namespace> svc/<service_name> <localhost_port>:<service_port> List all PVC associated with their respective pod kubectl get po -o json --all-namespaces | jq -j '.items[] | \"\\(.metadata.namespace), \\(.metadata.name), \\(.spec.volumes[].persistentVolumeClaim.claimName)\\n\"' | grep -v null List aal pods with events related to them kubectl get pods --watch --output-watch-events -A List all events with filter \"type=Warning\" kubectl get events -w --field-selector=type=Warning -A List all environment variables of specific pod kubectl set env -n <namespace> pod/<podname> --list","title":"Common Commands"},{"location":"k8s/#advanced-commands","text":"List of nodes and their memory size kubectl get no -o json | jq -r '.items | sort_by(.status.capacity.memory)[]|[.metadata.name,.status.capacity.memory]| @tsv' List of nodes and the number of pods running on them kubectl get pod -o json --all-namespaces | jq '.items | group_by(.spec.nodeName) | map({\"nodeName\": .[0].spec.nodeName, \"count\": length}) | sort_by(.count)' List all pods sort by memory usage k top pods -A --sort-by='memory' List all pods sorted by cpu usage k top pods -A --sort-by='cpu' Sorting list of pods (in this case, by the number of restarts) kubectl get pods --sort-by=.status.containerStatuses[0].restartCount Print limits and requests for each pod kubectl get pods -n <namespace> -o=custom-columns='NAME:spec.containers[*].name,MEMREQ:spec.containers[*].resources.requests.memory,MEMLIM:spec.containers[*].resources.limits.memory,CPUREQ:spec.containers[*].resources.requests.cpu,CPULIM:spec.containers[*].resources.limits.cpu' Print all services and their respective nodePorts kubectl get --all-namespaces svc -o json | jq -r '.items[] | [.metadata.name,([.spec.ports[].nodePort | tostring ] | join(\"|\"))]| @tsv' Copy secrets from a namespace to another kubectl get secrets -o json --namespace <namespace_source> | jq '.items[].metadata.namespace = \"<namespace_destiny>\"' | kubectl create-f -","title":"Advanced Commands"},{"location":"k8s/#logging-commands","text":"","title":"Logging Commands"},{"location":"k8s/#kubectl","text":"Print logs with human-readable timestamp kubectl -n <namespace> logs -f <pod_name> --timestamps Getting logs from all pods using alabel to filter kubectl -n <namespace> logs -f -l app=nginx","title":"Kubectl"},{"location":"k8s/#stern","text":"Tail logs all pods on specific namespace stern -n <namespace> . Tail logs all pods with excludeds stern -n <namespace> --exclude-container <pattern_string> . Tail logs specific pods stern -n <namespace> --container <pattern_string>","title":"Stern"},{"location":"k8s/#tutorials-and-guides","text":"","title":"Tutorials and Guides"},{"location":"k8s/#networking","text":"The Kubernetes Networking Guide An Illustrated Guide to Kubernetes Networking [Part 1] An Illustrated Guide to Kubernetes Networking [Part 2] An Illustrated Guide to Kubernetes Networking [Part 3] ALB Ingress Controller on AWS EKS","title":"Networking"},{"location":"others/","text":"Others Tools and Projects D2 Declarative Diagramming: A modern diagram scripting language that turns text to diagrams","title":"Others"},{"location":"others/#others","text":"","title":"Others"},{"location":"others/#tools-and-projects","text":"D2 Declarative Diagramming: A modern diagram scripting language that turns text to diagrams","title":"Tools and Projects"},{"location":"terraform/","text":"Terraform Tutorials and Guides Nathan Nellan's Terraform Guide Terraform Official Documentation Best Practices Terraform Practices: The Good, the Bad and the Ugly by Hila Fish","title":"Terraform"},{"location":"terraform/#terraform","text":"","title":"Terraform"},{"location":"terraform/#tutorials-and-guides","text":"Nathan Nellan's Terraform Guide Terraform Official Documentation","title":"Tutorials and Guides"},{"location":"terraform/#best-practices","text":"Terraform Practices: The Good, the Bad and the Ugly by Hila Fish","title":"Best Practices"}]}