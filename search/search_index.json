{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gon Personal Docs This documentation is a remainder of all tools and technologie sthat I use on my job. Most of the documentation may be is a mix off commands and explanations that I wrote quickly and dirty, but it helps me to remind all this stuff.","title":"Home"},{"location":"#gon-personal-docs","text":"This documentation is a remainder of all tools and technologie sthat I use on my job. Most of the documentation may be is a mix off commands and explanations that I wrote quickly and dirty, but it helps me to remind all this stuff.","title":"Gon Personal Docs"},{"location":"ai-for-devops/","text":"IA for DevOps K8sGPT https://k8sgpt.ai/ K8sGPT is a tool for scanning your kubernetes clusters, diagnosing and triaging issues. AI for Kubernetes with ChatGPT and k8sgpt Cast AI https://cast.ai/ Tool for cuts cloud costs, monitoring k8s costs and detect vulnerabilities. CAST.AI - Ahorrando dinero en Kubernetes Cost-Aware Kubernetes Cluster Autoscaling With CAST AI Automate BIG Savings For You Kubernetes Cluster Kubiya https://www.kubiya.ai/ ChatGPT for DevOps. A lot of useful integrations like GitHub, AWS, K8s, Terraform, etc... Meet your DevOps AI Assistant Kubiya Agents - Use-Case Review","title":"AI for DevOps"},{"location":"ai-for-devops/#ia-for-devops","text":"","title":"IA for DevOps"},{"location":"ai-for-devops/#k8sgpt","text":"https://k8sgpt.ai/ K8sGPT is a tool for scanning your kubernetes clusters, diagnosing and triaging issues. AI for Kubernetes with ChatGPT and k8sgpt","title":"K8sGPT"},{"location":"ai-for-devops/#cast-ai","text":"https://cast.ai/ Tool for cuts cloud costs, monitoring k8s costs and detect vulnerabilities. CAST.AI - Ahorrando dinero en Kubernetes Cost-Aware Kubernetes Cluster Autoscaling With CAST AI Automate BIG Savings For You Kubernetes Cluster","title":"Cast AI"},{"location":"ai-for-devops/#kubiya","text":"https://www.kubiya.ai/ ChatGPT for DevOps. A lot of useful integrations like GitHub, AWS, K8s, Terraform, etc... Meet your DevOps AI Assistant Kubiya Agents - Use-Case Review","title":"Kubiya"},{"location":"aws/","text":"","title":"AWS"},{"location":"bash/","text":"BASH Common Commands Find files with an specific name and execute gsed for replace a string for another find . -type f -name 'filename' | xargs gsed -i 's/<pattern_A>/<pattern_B>/g' Find files with an specific name and execute gsed for delete a line where a string pattern is matched find . -type f -name 'filename' | xargs gsed -i '/<pattern>/d' Tutorials and Guides Best Practices Shell Script Best Practices","title":"BASH"},{"location":"bash/#bash","text":"","title":"BASH"},{"location":"bash/#common-commands","text":"Find files with an specific name and execute gsed for replace a string for another find . -type f -name 'filename' | xargs gsed -i 's/<pattern_A>/<pattern_B>/g' Find files with an specific name and execute gsed for delete a line where a string pattern is matched find . -type f -name 'filename' | xargs gsed -i '/<pattern>/d'","title":"Common Commands"},{"location":"bash/#tutorials-and-guides","text":"","title":"Tutorials and Guides"},{"location":"bash/#best-practices","text":"Shell Script Best Practices","title":"Best Practices"},{"location":"cka_tips/","text":"CKA Tips Some tips for prepare/use on CKA exam Generate YAML template/files for most common k8s resources objects Generate a POD YAML file kubectl run nginx --image=nginx --dry-run=client -o yaml Generate Deployment YAML file kubectl create deployment --image=nginx nginx --dry-run=client -o yaml Generate Service YAML file kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml Create Service named 'redis-service' exposing pod 'redis' kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml Upgrade Kubernetes Process Example how to upgrade a Kubernetes cluster. In this case is using tool kubeadm and upgrading from version 1.28 to 1.29 . On the controlplane node: * Drain node kubectl drain controlplane --ignore-daemonsets Open the file that defines the Kubernetes apt repository: vim /etc/apt/sources.list.d/kubernetes.list Update the version in the URL to the next available minor release, i.e v1.29. deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ / After making changes, save the file and exit from your text editor. Proceed with the next instruction. root@controlplane:~# apt update root@controlplane:~# apt-cache madison kubeadm Based on the version information displayed by apt-cache madison, it indicates that for Kubernetes version 1.29.0, the available package version is 1.29.0-1.1. Therefore, to install kubeadm for Kubernetes v1.29.0, use the following command: root@controlplane:~# apt-get install kubeadm=1.29.0-1.1 Run the following command to upgrade the Kubernetes cluster. root@controlplane:~# kubeadm upgrade plan v1.29.0 root@controlplane:~# kubeadm upgrade apply v1.29.0 Now, upgrade the version and restart Kubelet. Also, mark the node (in this case, the \"controlplane\" node) as schedulable. root@controlplane:~# apt-get install kubelet=1.29.0-1.1 root@controlplane:~# systemctl daemon-reload root@controlplane:~# systemctl restart kubelet root@controlplane:~# kubectl uncordon controlplane Uncordon node kubectl uncordon controlplane On the node01 node: * Drain node kubectl drain node01 --ignore-daemonsets Use any text editor you prefer to open the file that defines the Kubernetes apt repository. vim /etc/apt/sources.list.d/kubernetes.list Update the version in the URL to the next available minor release, i.e v1.29. deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ / After making changes, save the file and exit from your text editor. Proceed with the next instruction. root@node01:~# apt update root@node01:~# apt-cache madison kubeadm Based on the version information displayed by apt-cache madison, it indicates that for Kubernetes version 1.29.0, the available package version is 1.29.0-1.1. Therefore, to install kubeadm for Kubernetes v1.29.0, use the following command: root@node01:~# apt-get install kubeadm=1.29.0-1.1 # Upgrade the node root@node01:~# kubeadm upgrade node Now, upgrade the version and restart Kubelet. root@node01:~# apt-get install kubelet=1.29.0-1.1 root@node01:~# systemctl daemon-reload root@node01:~# systemctl restart kubelet Managing etcd service After login on etcd-server , get the list of endpoints for to know if etcd server is acluster and how many nodes has: ETCDCTL_API=3 etcdctl \\ --endpoints=https://127.0.0.1:2379 \\ --cacert=/etc/etcd/pki/ca.pem \\ --cert=/etc/etcd/pki/etcd.pem \\ --key=/etc/etcd/pki/etcd-key.pem \\ member list","title":"CKA Tips"},{"location":"cka_tips/#cka-tips","text":"Some tips for prepare/use on CKA exam","title":"CKA Tips"},{"location":"cka_tips/#generate-yaml-templatefiles-for-most-common-k8s-resources-objects","text":"Generate a POD YAML file kubectl run nginx --image=nginx --dry-run=client -o yaml Generate Deployment YAML file kubectl create deployment --image=nginx nginx --dry-run=client -o yaml Generate Service YAML file kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml Create Service named 'redis-service' exposing pod 'redis' kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml","title":"Generate YAML template/files for most common k8s resources objects"},{"location":"cka_tips/#upgrade-kubernetes-process","text":"Example how to upgrade a Kubernetes cluster. In this case is using tool kubeadm and upgrading from version 1.28 to 1.29 . On the controlplane node: * Drain node kubectl drain controlplane --ignore-daemonsets Open the file that defines the Kubernetes apt repository: vim /etc/apt/sources.list.d/kubernetes.list Update the version in the URL to the next available minor release, i.e v1.29. deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ / After making changes, save the file and exit from your text editor. Proceed with the next instruction. root@controlplane:~# apt update root@controlplane:~# apt-cache madison kubeadm Based on the version information displayed by apt-cache madison, it indicates that for Kubernetes version 1.29.0, the available package version is 1.29.0-1.1. Therefore, to install kubeadm for Kubernetes v1.29.0, use the following command: root@controlplane:~# apt-get install kubeadm=1.29.0-1.1 Run the following command to upgrade the Kubernetes cluster. root@controlplane:~# kubeadm upgrade plan v1.29.0 root@controlplane:~# kubeadm upgrade apply v1.29.0 Now, upgrade the version and restart Kubelet. Also, mark the node (in this case, the \"controlplane\" node) as schedulable. root@controlplane:~# apt-get install kubelet=1.29.0-1.1 root@controlplane:~# systemctl daemon-reload root@controlplane:~# systemctl restart kubelet root@controlplane:~# kubectl uncordon controlplane Uncordon node kubectl uncordon controlplane On the node01 node: * Drain node kubectl drain node01 --ignore-daemonsets Use any text editor you prefer to open the file that defines the Kubernetes apt repository. vim /etc/apt/sources.list.d/kubernetes.list Update the version in the URL to the next available minor release, i.e v1.29. deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ / After making changes, save the file and exit from your text editor. Proceed with the next instruction. root@node01:~# apt update root@node01:~# apt-cache madison kubeadm Based on the version information displayed by apt-cache madison, it indicates that for Kubernetes version 1.29.0, the available package version is 1.29.0-1.1. Therefore, to install kubeadm for Kubernetes v1.29.0, use the following command: root@node01:~# apt-get install kubeadm=1.29.0-1.1 # Upgrade the node root@node01:~# kubeadm upgrade node Now, upgrade the version and restart Kubelet. root@node01:~# apt-get install kubelet=1.29.0-1.1 root@node01:~# systemctl daemon-reload root@node01:~# systemctl restart kubelet","title":"Upgrade Kubernetes Process"},{"location":"cka_tips/#managing-etcd-service","text":"After login on etcd-server , get the list of endpoints for to know if etcd server is acluster and how many nodes has: ETCDCTL_API=3 etcdctl \\ --endpoints=https://127.0.0.1:2379 \\ --cacert=/etc/etcd/pki/ca.pem \\ --cert=/etc/etcd/pki/etcd.pem \\ --key=/etc/etcd/pki/etcd-key.pem \\ member list","title":"Managing etcd service"},{"location":"dse/","text":"","title":"DataStax"},{"location":"github-actions/","text":"GitHub Actions Tutorials and Guides GitHub Actions Official Documentation GitHub Actions: Terraform deployments with a review of planned changes Tools and Projects Act: Run GitHub Actions locally","title":"GitHub Actions"},{"location":"github-actions/#github-actions","text":"","title":"GitHub Actions"},{"location":"github-actions/#tutorials-and-guides","text":"GitHub Actions Official Documentation GitHub Actions: Terraform deployments with a review of planned changes","title":"Tutorials and Guides"},{"location":"github-actions/#tools-and-projects","text":"Act: Run GitHub Actions locally","title":"Tools and Projects"},{"location":"help/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"help/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"help/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"help/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"istio/","text":"","title":"Istio"},{"location":"k8s/","text":"Kubernetes Common Commands Run pod kubectl run <pod_name> --image <image> -n <namespace> Run pod and passing a command kubectl run -i --tty <pod_name> --image=<image> -n <namespace> -- <command> Get info about cluster kubectl cluster-info Get all pods kubectl get pods -A Get resource yaml kubectl get <resource> -n <namespace> <resource_name> -o yaml Get list of CRD applied kubectl get customresourcedefinitions List pods Docker images in a specific namespace kubectl get pods -n <namespace> -o jsonpath=\"{.items[*].spec.containers[*].image}\" Restart all deployments in a namespace kubectl rollout restart deployment -n <namespace> List all running pods in a specific namespace kubectl get pods -n <namespace> --field-selector=status.phase=Running List all non-running pods in a specific namespace kubectl get pods -A --field-selector=status.phase!=Running | grep -v Complete Create tunnel to a service using port-forward (like a SSH tunnel) kubectl port-forward -n <namespace> svc/<service_name> <localhost_port>:<service_port> List all PVC associated with their respective pod kubectl get po -o json --all-namespaces | jq -j '.items[] | \"\\(.metadata.namespace), \\(.metadata.name), \\(.spec.volumes[].persistentVolumeClaim.claimName)\\n\"' | grep -v null List aal pods with events related to them kubectl get pods --watch --output-watch-events -A List all events with filter \"type=Warning\" kubectl get events -w --field-selector=type=Warning -A List all environment variables of specific pod kubectl set env -n <namespace> pod/<podname> --list Advanced Commands Run pod multitool for testing/debugging on k8s kubectl run multitool --namespace <namespace> --image=wbitt/network-multitool:extra -it --tty --rm --restart=Never -- sh List of nodes and their memory size kubectl get no -o json | jq -r '.items | sort_by(.status.capacity.memory)[]|[.metadata.name,.status.capacity.memory]| @tsv' List of nodes and the number of pods running on them kubectl get pod -o json --all-namespaces | jq '.items | group_by(.spec.nodeName) | map({\"nodeName\": .[0].spec.nodeName, \"count\": length}) | sort_by(.count)' List all pods sort by memory usage k top pods -A --sort-by='memory' List all pods sorted by cpu usage k top pods -A --sort-by='cpu' Sorting list of pods (in this case, by the number of restarts) kubectl get pods --sort-by=.status.containerStatuses[0].restartCount Print limits and requests for each pod kubectl get pods -n <namespace> -o=custom-columns='NAME:spec.containers[*].name,MEMREQ:spec.containers[*].resources.requests.memory,MEMLIM:spec.containers[*].resources.limits.memory,CPUREQ:spec.containers[*].resources.requests.cpu,CPULIM:spec.containers[*].resources.limits.cpu' Print all services and their respective nodePorts kubectl get --all-namespaces svc -o json | jq -r '.items[] | [.metadata.name,([.spec.ports[].nodePort | tostring ] | join(\"|\"))]| @tsv' Copy secrets from a namespace to another kubectl get secrets -o json --namespace <namespace_source> | jq '.items[].metadata.namespace = \"<namespace_destiny>\"' | kubectl create-f - Logging Commands Kubectl Print logs with human-readable timestamp kubectl -n <namespace> logs -f <pod_name> --timestamps Getting logs from all pods using alabel to filter kubectl -n <namespace> logs -f -l app=nginx Kubetail Tail logs specific container kubetail <pod_name> -c <container_name> Tail logs from all containers on specific namespace kubetail -n <namespace> Stern Tail logs all pods on specific namespace stern -n <namespace> . Tail logs all pods with excludeds stern -n <namespace> --exclude-container <pattern_string> . Tail logs specific pods stern -n <namespace> --container <pattern_string> Definitions External DNS Service which manages DNS records, in our case, on Route53. External DNS check annotations on Service and Ingress objects. On UserTesting we configured External DNS just for checking annotations on Ingress objects. External DNS search domain names on annotations or host on rules and creates a register on Hosted Zones which we configure or matching with domain name which we configured. AWS Load Balancer Controller Service which manages Ingress and Services k8s objects. For Ingress it creates an ALB by default, but can be configured to create a NLB. For Service it creates NLB only, no ALB. We can configure the Load Balancer parameters using annotations . On the other hand, for configure Listener Rules we use the parameter rules of Ingress object. Emissary Ingress IT DOESN'T MANAGE LOAD BALANCER. It's a kind of application firewall. It routes requests using different paths. It works like a AWS Listener Rule but with a lot of extra options. Tutorials and Guides Ingresses Native EKS Ingress with AWS Load Balancer Controller Certificates Ingress + Cert-Manager DNS The life of a DNS query in Kubernetes Networking The Kubernetes Networking Guide An Illustrated Guide to Kubernetes Networking [Part 1] An Illustrated Guide to Kubernetes Networking [Part 2] An Illustrated Guide to Kubernetes Networking [Part 3] ALB Ingress Controller on AWS EKS What Actually Happens When You Publish a Container Port Secrets State of Kubernetes Secrets Management in 2022 How to Set External-Secrets with AWS How to Set External-Secrets with Hashicorp Vault Virtual Kubernetes Testing GitOps on Virtual Kubernetes Clusters with ArgoCD (Ephimeral k8s clusters) Troubleshooting How to identify and troubleshoot common Kubernetes errors","title":"Kubernetes"},{"location":"k8s/#kubernetes","text":"","title":"Kubernetes"},{"location":"k8s/#common-commands","text":"Run pod kubectl run <pod_name> --image <image> -n <namespace> Run pod and passing a command kubectl run -i --tty <pod_name> --image=<image> -n <namespace> -- <command> Get info about cluster kubectl cluster-info Get all pods kubectl get pods -A Get resource yaml kubectl get <resource> -n <namespace> <resource_name> -o yaml Get list of CRD applied kubectl get customresourcedefinitions List pods Docker images in a specific namespace kubectl get pods -n <namespace> -o jsonpath=\"{.items[*].spec.containers[*].image}\" Restart all deployments in a namespace kubectl rollout restart deployment -n <namespace> List all running pods in a specific namespace kubectl get pods -n <namespace> --field-selector=status.phase=Running List all non-running pods in a specific namespace kubectl get pods -A --field-selector=status.phase!=Running | grep -v Complete Create tunnel to a service using port-forward (like a SSH tunnel) kubectl port-forward -n <namespace> svc/<service_name> <localhost_port>:<service_port> List all PVC associated with their respective pod kubectl get po -o json --all-namespaces | jq -j '.items[] | \"\\(.metadata.namespace), \\(.metadata.name), \\(.spec.volumes[].persistentVolumeClaim.claimName)\\n\"' | grep -v null List aal pods with events related to them kubectl get pods --watch --output-watch-events -A List all events with filter \"type=Warning\" kubectl get events -w --field-selector=type=Warning -A List all environment variables of specific pod kubectl set env -n <namespace> pod/<podname> --list","title":"Common Commands"},{"location":"k8s/#advanced-commands","text":"Run pod multitool for testing/debugging on k8s kubectl run multitool --namespace <namespace> --image=wbitt/network-multitool:extra -it --tty --rm --restart=Never -- sh List of nodes and their memory size kubectl get no -o json | jq -r '.items | sort_by(.status.capacity.memory)[]|[.metadata.name,.status.capacity.memory]| @tsv' List of nodes and the number of pods running on them kubectl get pod -o json --all-namespaces | jq '.items | group_by(.spec.nodeName) | map({\"nodeName\": .[0].spec.nodeName, \"count\": length}) | sort_by(.count)' List all pods sort by memory usage k top pods -A --sort-by='memory' List all pods sorted by cpu usage k top pods -A --sort-by='cpu' Sorting list of pods (in this case, by the number of restarts) kubectl get pods --sort-by=.status.containerStatuses[0].restartCount Print limits and requests for each pod kubectl get pods -n <namespace> -o=custom-columns='NAME:spec.containers[*].name,MEMREQ:spec.containers[*].resources.requests.memory,MEMLIM:spec.containers[*].resources.limits.memory,CPUREQ:spec.containers[*].resources.requests.cpu,CPULIM:spec.containers[*].resources.limits.cpu' Print all services and their respective nodePorts kubectl get --all-namespaces svc -o json | jq -r '.items[] | [.metadata.name,([.spec.ports[].nodePort | tostring ] | join(\"|\"))]| @tsv' Copy secrets from a namespace to another kubectl get secrets -o json --namespace <namespace_source> | jq '.items[].metadata.namespace = \"<namespace_destiny>\"' | kubectl create-f -","title":"Advanced Commands"},{"location":"k8s/#logging-commands","text":"","title":"Logging Commands"},{"location":"k8s/#kubectl","text":"Print logs with human-readable timestamp kubectl -n <namespace> logs -f <pod_name> --timestamps Getting logs from all pods using alabel to filter kubectl -n <namespace> logs -f -l app=nginx","title":"Kubectl"},{"location":"k8s/#kubetail","text":"Tail logs specific container kubetail <pod_name> -c <container_name> Tail logs from all containers on specific namespace kubetail -n <namespace>","title":"Kubetail"},{"location":"k8s/#stern","text":"Tail logs all pods on specific namespace stern -n <namespace> . Tail logs all pods with excludeds stern -n <namespace> --exclude-container <pattern_string> . Tail logs specific pods stern -n <namespace> --container <pattern_string>","title":"Stern"},{"location":"k8s/#definitions","text":"","title":"Definitions"},{"location":"k8s/#external-dns","text":"Service which manages DNS records, in our case, on Route53. External DNS check annotations on Service and Ingress objects. On UserTesting we configured External DNS just for checking annotations on Ingress objects. External DNS search domain names on annotations or host on rules and creates a register on Hosted Zones which we configure or matching with domain name which we configured.","title":"External DNS"},{"location":"k8s/#aws-load-balancer-controller","text":"Service which manages Ingress and Services k8s objects. For Ingress it creates an ALB by default, but can be configured to create a NLB. For Service it creates NLB only, no ALB. We can configure the Load Balancer parameters using annotations . On the other hand, for configure Listener Rules we use the parameter rules of Ingress object.","title":"AWS Load Balancer Controller"},{"location":"k8s/#emissary-ingress","text":"IT DOESN'T MANAGE LOAD BALANCER. It's a kind of application firewall. It routes requests using different paths. It works like a AWS Listener Rule but with a lot of extra options.","title":"Emissary Ingress"},{"location":"k8s/#tutorials-and-guides","text":"","title":"Tutorials and Guides"},{"location":"k8s/#ingresses","text":"Native EKS Ingress with AWS Load Balancer Controller","title":"Ingresses"},{"location":"k8s/#certificates","text":"Ingress + Cert-Manager","title":"Certificates"},{"location":"k8s/#dns","text":"The life of a DNS query in Kubernetes","title":"DNS"},{"location":"k8s/#networking","text":"The Kubernetes Networking Guide An Illustrated Guide to Kubernetes Networking [Part 1] An Illustrated Guide to Kubernetes Networking [Part 2] An Illustrated Guide to Kubernetes Networking [Part 3] ALB Ingress Controller on AWS EKS What Actually Happens When You Publish a Container Port","title":"Networking"},{"location":"k8s/#secrets","text":"State of Kubernetes Secrets Management in 2022 How to Set External-Secrets with AWS How to Set External-Secrets with Hashicorp Vault","title":"Secrets"},{"location":"k8s/#virtual-kubernetes","text":"Testing GitOps on Virtual Kubernetes Clusters with ArgoCD (Ephimeral k8s clusters)","title":"Virtual Kubernetes"},{"location":"k8s/#troubleshooting","text":"How to identify and troubleshoot common Kubernetes errors","title":"Troubleshooting"},{"location":"others/","text":"Others Tools and Projects D2 Declarative Diagramming: A modern diagram scripting language that turns text to diagrams JSON Crack: Seamlessly visualize your JSON data instantly into graphs.","title":"Others"},{"location":"others/#others","text":"","title":"Others"},{"location":"others/#tools-and-projects","text":"D2 Declarative Diagramming: A modern diagram scripting language that turns text to diagrams JSON Crack: Seamlessly visualize your JSON data instantly into graphs.","title":"Tools and Projects"},{"location":"terraform/","text":"Terraform Tutorials and Guides Nathan Nellan's Terraform Guide Terraform Official Documentation Elevate Your Terraform Game by leveraging for loops in Terraform Using tfsec to Scan your Terraform Code Terraform without wrappers in multi-region, multi-accounts environments Tools for Managing Terraform drift GitHub Actions: Terraform deployments with a review of planned changes Best Practices Terraform Practices: The Good, the Bad and the Ugly by Hila Fish","title":"Terraform"},{"location":"terraform/#terraform","text":"","title":"Terraform"},{"location":"terraform/#tutorials-and-guides","text":"Nathan Nellan's Terraform Guide Terraform Official Documentation Elevate Your Terraform Game by leveraging for loops in Terraform Using tfsec to Scan your Terraform Code Terraform without wrappers in multi-region, multi-accounts environments Tools for Managing Terraform drift GitHub Actions: Terraform deployments with a review of planned changes","title":"Tutorials and Guides"},{"location":"terraform/#best-practices","text":"Terraform Practices: The Good, the Bad and the Ugly by Hila Fish","title":"Best Practices"}]}